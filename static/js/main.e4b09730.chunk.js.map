{"version":3,"sources":["components/Nav.js","components/NoteItem.js","firebase/Firebase.js","components/ListNote.js","components/AddNoteForm.js","components/AlertInfo.js","components/App.js","serviceWorker.js","components/Store.js","index.js"],"names":["Nav","handleAdd","event","preventDefault","props","changeEditStatus","changeTitle","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","placeholder","Component","connect","dispatch","ownProps","status","NoteItem","editNote","changeEditView","getEditData","item","deleteNote","deleteById","alertOn","role","aria-multiselectable","data-parent","this","index","title","aria-labelledby","content","editObject","deleteId","alertContent","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseConnect","ref","ListNote","getData","state","dataFirebase","map","value","key","on","notes","arrayData","forEach","element","val","push","setState","AddNoteForm","isChane","name","target","addData","onClickMe","renderTitle","onChange","aria-describedby","defaultValue","htmlFor","rows","dataEditObject","isAdd","alertOff","AlertInfo","handleDismiss","alertShow","onDismiss","timeout","App","viewEditForm","isEdit","Boolean","window","location","hostname","match","redux","require","noteInitialState","store","createStore","action","child","update","console","log","remove","subscribe","JSON","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uMAGMA,E,4MACFC,UAAY,SAACC,GACTA,EAAMC,iBAEN,EAAKC,MAAMC,mBACX,EAAKD,MAAME,aAAY,I,uDAEjB,IAAD,OACL,OACI,yBAAKC,UAAU,+CACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,eAAeC,KAAK,qBAAjC,gBACA,4BAAQD,UAAU,2BAA2BE,KAAK,SAASC,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAAmBC,gBAAc,QAAQC,aAAW,sBACpL,yBAAKP,UAAU,2BAA2BQ,GAAG,oBACzC,wBAAIR,UAAU,mCACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,qBAA7B,OAAqD,0BAAMD,UAAU,WAAhB,eAEzD,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,oBAAoBQ,QAAS,SAACd,GAAW,EAAKD,UAAUC,KAArF,gBAGR,0BAAMK,UAAU,4BACZ,2BAAOA,UAAU,uBAAuBE,KAAK,OAAOQ,YAAY,WAChE,4BAAQV,UAAU,uCAAuCE,KAAK,UAA9D,kB,GAxBVS,aA0CHC,cAAQ,MAVI,SAACC,EAAUC,GAClC,MAAO,CACHhB,iBAAkB,WACde,EAAS,CAACX,KAAK,wBAEnBH,YAAa,SAACgB,GACVF,EAAS,CAACX,KAAK,eAAea,eAI3BH,CAAkCnB,GC1C3CuB,E,4MACFC,SAAW,WACP,EAAKpB,MAAMqB,iBACX,EAAKrB,MAAMsB,YAAY,EAAKtB,MAAMuB,MAClC,EAAKvB,MAAME,aAAY,I,EAE3BsB,WAAa,WACT,EAAKxB,MAAMyB,WAAW,EAAKzB,MAAMuB,KAAKZ,IACtC,EAAKX,MAAM0B,QAAQ,4B,uDAEb,IAAD,OACL,OACI,yBAAKf,GAAG,cACJgB,KAAK,UACLC,uBAAqB,QACrB,yBAAKzB,UAAU,QACX,yBAAKA,UAAU,cACXwB,KAAK,MAAMhB,GAAG,oBACd,wBAAIR,UAAU,iBACV,uBAAGG,cAAY,WACXuB,cAAY,eACZzB,KAAM,SAAW0B,KAAK9B,MAAM+B,MAC5BtB,gBAAc,OACdD,gBAAc,qBACbsB,KAAK9B,MAAMgC,QAEpB,yBAAK7B,UAAU,wBACX,4BACIA,UAAU,mCACVS,QAAS,kBAAM,EAAKQ,aAFxB,YAIA,4BACIjB,UAAU,gCACVS,QAAS,kBAAK,EAAKY,eAFvB,YAMR,yBAAKb,GAAI,QAAUmB,KAAK9B,MAAM+B,MAC1B5B,UAAU,cACVwB,KAAK,WACLM,kBAAgB,oBAChB,yBAAK9B,UAAU,aACV2B,KAAK9B,MAAMkC,gB,GA1CjBpB,aAwERC,cAAQ,MArBI,SAACC,EAAUC,GAClC,MAAO,CACHI,eAAgB,WACZL,EAAS,CAAEX,KAAM,wBAErBiB,YAAa,SAACa,GACVnB,EAAS,CAAEX,KAAM,gBAAiB8B,gBAEtCV,WAAY,SAACW,GACTpB,EAAS,CAACX,KAAK,SAAS+B,cAE5BlC,YAAa,SAACgB,GACVF,EAAS,CAACX,KAAK,eAAea,YAElCQ,QAAS,SAACW,GACNrB,EAAS,CAAEX,KAAM,WAAWgC,qBAMzBtB,CAAkCI,G,QC9D/CmB,gBAXmB,CACjBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBR,cACK,IAAMS,EAAmBT,aAAoBU,IAAI,eCwCzCC,E,kDAlDX,WAAYjD,GAAQ,IAAD,8BACf,cAAMA,IAwBVkD,QAAU,WACN,GAAI,EAAKC,MAAMC,aACX,OAAO,EAAKD,MAAMC,aAAaC,KAAI,SAACC,EAAMC,GACtC,OAAO,kBAAC,EAAD,CACHA,IAAOA,EACPxB,MAASwB,EACTvB,MAASsB,EAAMtB,MACfE,QAAWoB,EAAMpB,QACjBX,KAAQ+B,QA/BpB,EAAKH,MAAM,CACPC,aAAa,IAHF,E,iEAMG,IAAD,OACjBL,EAAgBS,GAAG,SAAS,SAACC,GACzB,IAAIC,EAAY,GAChBD,EAAME,SAAQ,SAAAC,GACV,IAAML,EAAMK,EAAQL,IACdvB,EAAQ4B,EAAQC,MAAM7B,MACtBE,EAAU0B,EAAQC,MAAM3B,QAC9BwB,EAAUI,KAAK,CACXnD,GAAI4C,EACJvB,MAAOA,EACPE,QAASA,OAGjB,EAAK6B,SAAS,CACVX,aAAcM,S,+BAqBtB,OACI,6BACK5B,KAAKoB,e,GA5CCpC,a,QCAjBkD,E,kDACF,WAAYhE,GAAQ,IAAD,8BACf,cAAMA,IAkBViE,QAAU,SAACnE,GACP,IAAMoE,EAAOpE,EAAMqE,OAAOD,KACpBZ,EAAQxD,EAAMqE,OAAOb,MAC3B,EAAKS,SAAL,eACKG,EAAOZ,KAvBG,EA0BnBc,QAAU,SAACpC,EAAME,GACb,GAAG,EAAKiB,MAAMxC,GAAG,CAEb,IAAIwB,EAAa,GACjBA,EAAWxB,GAAK,EAAKwC,MAAMxC,GAC3BwB,EAAWH,MAAQ,EAAKmB,MAAMnB,MAC9BG,EAAWD,QAAU,EAAKiB,MAAMjB,QAChC,EAAKlC,MAAMkD,QAAQf,GACnB,EAAKnC,MAAMqB,iBACX,EAAKrB,MAAM0B,QAAQ,iCAEnB,CACA,IAAIH,EAAO,GACXA,EAAKS,MAAQA,EACbT,EAAKW,QAAUA,EACf,EAAKlC,MAAMqE,UAAU9C,GACrB,EAAKvB,MAAM0B,QAAQ,uCA1CR,EA8CnB4C,YAAc,WACV,OAAG,EAAKtE,MAAMkB,OACH,gEAEC,kEAhDZ,EAAKiC,MAAM,CACPnB,MAAM,GACNE,QAAQ,GACRvB,GAAG,IALQ,E,iEAUZmB,KAAK9B,MAAMuB,MACVO,KAAKiC,SAAS,CACV/B,MAAMF,KAAK9B,MAAMuB,KAAKS,MACtBE,QAAQJ,KAAK9B,MAAMuB,KAAKW,QACxBvB,GAAGmB,KAAK9B,MAAMuB,KAAKZ,O,+BAsCrB,IAAD,OACL,OACI,yBAAMR,UAAU,SACX2B,KAAKwC,cACN,0BAAMnE,UAAU,cAEZ,oEACA,2BAAOE,KAAK,OACZF,UAAU,eACV+D,KAAK,QACLvD,GAAG,QACH4D,SAAU,SAACzE,GAAD,OAAU,EAAKmE,QAAQnE,IACjC0E,mBAAiB,SACjBC,aAAc3C,KAAK9B,MAAMuB,KAAKS,MAC9BnB,YAAY,mCACZ,2BAAOF,GAAG,SACVR,UAAU,wBADV,0DAEA,2BAAOuE,QAAQ,WAAf,iBACA,8BAAUvE,UAAU,eACpB+D,KAAK,UACLvD,GAAG,UACH4D,SAAU,SAACzE,GAAD,OAAU,EAAKmE,QAAQnE,IACjC6E,KAAM,EACN9D,YAAY,6CACZ4D,aAAc3C,KAAK9B,MAAMuB,KAAKW,UAClC,4BAAQ7B,KAAK,QACbF,UAAU,iCACVS,QAAS,kBAAK,EAAKwD,QAAQ,EAAKjB,MAAMnB,MAAM,EAAKmB,MAAMjB,WAFvD,+B,GA9EUpB,aAkHXC,eA1BS,SAACoC,EAAOlC,GAC5B,MAAO,CACHM,KAAM4B,EAAMyB,eACZ1D,OAAQiC,EAAM0B,UAIK,SAAC7D,EAAUC,GAClC,MAAO,CACHoD,UAAW,SAAC9C,GACRP,EAAS,CAACX,KAAK,MAAMkB,UAEzB2B,QAAS,SAAC3B,GACNP,EAAS,CAACX,KAAK,OAAOkB,UAE1BF,eAAgB,WACZL,EAAS,CAAEX,KAAM,wBAErBqB,QAAS,SAACW,GACNrB,EAAS,CAAEX,KAAM,WAAWgC,kBAEhCyC,SAAU,WACN9D,EAAS,CAAEX,KAAM,kBAIdU,CAA6CiD,G,QClHtDe,E,4MACFC,cAAgB,WACZ,EAAKhF,MAAM8E,Y,uDAEL,IAAD,OACL,OAAIhD,KAAK9B,MAAMiF,UAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO5E,KAAK,UAAU6E,UAAW,kBAAM,EAAKF,iBAAiBG,QAAS,KACjErD,KAAK9B,MAAMqC,eAJS,S,GALjBvB,aA4BTC,eAbS,SAACoC,EAAOlC,GAC5B,MAAO,CACHgE,UAAW9B,EAAM8B,UACjB5C,aAAcc,EAAMd,iBAGD,SAACrB,EAAUC,GAClC,MAAO,CACH6D,SAAU,WACN9D,EAAS,CAACX,KAAK,kBAIZU,CAA4CgE,GCzBrDK,E,4MACJC,aAAe,WACb,GAAI,EAAKrF,MAAMsF,OACb,OAAO,kBAAC,EAAD,O,uDAIT,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKnF,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAED2B,KAAKuD,sB,GAhBAvE,aA4BHC,eALS,SAACoC,EAAOlC,GAC9B,MAAO,CACLqE,OAAQnC,EAAMmC,UAGHvE,CAAyBqE,GCvBpBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBFC,EAAQC,EAAQ,IACdC,EAAmB,CACrBR,QAAQ,EACRV,eAAe,GACfC,OAAO,EACPI,WAAW,EACX5C,aAAa,IAoCb0D,EAAQH,EAAMI,aAlCC,WAAuC,IAAtC7C,EAAqC,uDAA7B2C,EAAkBG,EAAW,uCACrD,OAAQA,EAAO5F,MACX,IAAK,MAED,OADA0C,EAAgBe,KAAKmC,EAAO1E,MACrB4B,EAEX,IAAK,qBACD,OAAO,2BAAIA,GAAX,IAAiBmC,QAAQnC,EAAMmC,SAEnC,IAAK,gBACD,OAAO,2BAAInC,GAAX,IAAiByB,eAAeqB,EAAO9D,aAE3C,IAAK,OAMD,OALAY,EAAgBmD,MAAMD,EAAO1E,KAAKZ,IAAIwF,OAAO,CACzCnE,MAAOiE,EAAO1E,KAAKS,MACnBE,QAAS+D,EAAO1E,KAAKW,UAEzBkE,QAAQC,IAAI,aACL,2BAAIlD,GAAX,IAAiByB,eAAe,KACpC,IAAK,SAED,OADA7B,EAAgBmD,MAAMD,EAAO7D,UAAUkE,SAChCnD,EACX,IAAK,eACD,OAAO,2BAAIA,GAAX,IAAiB0B,MAAMoB,EAAO/E,SAClC,IAAK,WACD,OAAO,2BAAIiC,GAAX,IAAiB8B,WAAU,EAAK5C,aAAa4D,EAAO5D,eACxD,IAAK,YACD,OAAO,2BAAIc,GAAX,IAAiB8B,WAAU,IAE/B,QACI,OAAO9B,MAKnB4C,EAAMQ,WAAU,WACZH,QAAQC,IAAIG,KAAKC,UAAUV,EAAMW,gBAEtBX,QCzCfY,IAASC,OACP,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,OAEFc,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.e4b09730.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Nav extends Component {\r\n    handleAdd = (event) => {\r\n        event.preventDefault();\r\n        \r\n        this.props.changeEditStatus();\r\n        this.props.changeTitle(true);\r\n    }\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <a className=\"navbar-brand\" href=\"http://google.com\">Note Manager</a>\r\n                    <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" />\r\n                    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                            <li className=\"nav-item active\">\r\n                                <a className=\"nav-link\" href=\"http://google.com\">Home<span className=\"sr-only\">(current)</span></a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"http://google.com\" onClick={(event) => {this.handleAdd(event)}}>View Notes</a>\r\n                            </li>\r\n                        </ul>\r\n                        <form className=\"form-inline my-2 my-lg-0\">\r\n                            <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\r\n                            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditStatus: () => {\r\n            dispatch({type:\"CHANGE_EDIT_STATUS\"})\r\n        },\r\n        changeTitle: (status) => {\r\n            dispatch({type:\"CHANGE_TITLE\",status})\r\n        }\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(Nav);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass NoteItem extends Component {\r\n    editNote = () => {\r\n        this.props.changeEditView();\r\n        this.props.getEditData(this.props.item);\r\n        this.props.changeTitle(false);\r\n    }\r\n    deleteNote = () => {\r\n        this.props.deleteById(this.props.item.id);\r\n        this.props.alertOn(\"Xóa thành công\");\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"accordianId\"\r\n                role=\"tablist\"\r\n                aria-multiselectable=\"true\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\"\r\n                        role=\"tab\" id=\"section1HeaderId\">\r\n                        <h5 className=\"mb-0 d-inline\">\r\n                            <a data-toggle=\"collapse\"\r\n                                data-parent=\"#accordianId\"\r\n                                href={'#index' + this.props.index}\r\n                                aria-expanded=\"true\"\r\n                                aria-controls=\"section1ContentId\">\r\n                                {this.props.title}</a>\r\n                        </h5>\r\n                        <div className=\"d-inline float-right\">\r\n                            <button\r\n                                className=\"btn btn-outline-info btn-sm mr-2\"\r\n                                onClick={() => this.editNote()}\r\n                            >Sửa</button>\r\n                            <button\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                                onClick={() =>this.deleteNote()}\r\n                            >Xóa</button>\r\n                        </div>\r\n                    </div>\r\n                    <div id={\"index\" + this.props.index}\r\n                        className=\"collapse in\"\r\n                        role=\"tabpanel\"\r\n                        aria-labelledby=\"section1HeaderId\">\r\n                        <div className=\"card-body\">\r\n                            {this.props.content}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditView: () => {\r\n            dispatch({ type: \"CHANGE_EDIT_STATUS\" })\r\n        },\r\n        getEditData: (editObject) => {\r\n            dispatch({ type: \"GET_EDIT_DATA\", editObject })\r\n        },\r\n        deleteById: (deleteId) => {\r\n            dispatch({type:\"DELETE\",deleteId})\r\n        },\r\n        changeTitle: (status) => {\r\n            dispatch({type:\"CHANGE_TITLE\",status})\r\n        },\r\n        alertOn: (alertContent) => {\r\n            dispatch({ type: \"ALERT_ON\",alertContent})\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NoteItem);","import * as firebase from 'firebase'\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDqfIpnD-oTiTiqTgCG-e7msOpMi-3GwsY\",\r\n    authDomain: \"notemangerreactjs.firebaseapp.com\",\r\n    databaseURL: \"https://notemangerreactjs.firebaseio.com\",\r\n    projectId: \"notemangerreactjs\",\r\n    storageBucket: \"notemangerreactjs.appspot.com\",\r\n    messagingSenderId: \"992889611116\",\r\n    appId: \"1:992889611116:web:53f16ce7f12cee78898949\",\r\n    measurementId: \"G-C0GHLNFNC0\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\nexport const firebaseConnect =  firebase.database().ref('dataForNote');\r\n","import React, { Component } from 'react';\r\nimport NoteItem from './NoteItem';\r\nimport { firebaseConnect } from '../firebase/Firebase';\r\n\r\nclass ListNote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            dataFirebase:[]\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        firebaseConnect.on('value', (notes) => {\r\n            var arrayData = [];\r\n            notes.forEach(element => {\r\n                const key = element.key;\r\n                const title = element.val().title;\r\n                const content = element.val().content;\r\n                arrayData.push({\r\n                    id: key,\r\n                    title: title,\r\n                    content: content\r\n                })\r\n            });\r\n            this.setState({\r\n                dataFirebase: arrayData\r\n            });\r\n\r\n        });\r\n    }\r\n    getData = () => {\r\n        if (this.state.dataFirebase) {\r\n            return this.state.dataFirebase.map((value,key) => {\r\n                return <NoteItem\r\n                    key = {key}\r\n                    index = {key}\r\n                    title = {value.title}\r\n                    content = {value.content}\r\n                    item = {value}\r\n                >\r\n                </NoteItem>\r\n            })            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.getData()}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListNote;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass AddNoteForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            title:'',\r\n            content:'',\r\n            id:''\r\n        }\r\n    }\r\n    \r\n    componentWillMount() {\r\n        if(this.props.item){// edit case\r\n            this.setState({\r\n                title:this.props.item.title,\r\n                content:this.props.item.content,\r\n                id:this.props.item.id\r\n            });\r\n        }\r\n    }\r\n    \r\n    isChane = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    addData = (title,content) => {\r\n        if(this.state.id){\r\n            // edit case\r\n            var editObject = {};\r\n            editObject.id = this.state.id;\r\n            editObject.title = this.state.title;\r\n            editObject.content = this.state.content;\r\n            this.props.getData(editObject);\r\n            this.props.changeEditView();\r\n            this.props.alertOn(\"Sửa thành công\");\r\n        }\r\n        else{\r\n            var item = {};\r\n            item.title = title;\r\n            item.content = content;\r\n            this.props.onClickMe(item);\r\n            this.props.alertOn(\"Thêm mới thành công\");\r\n        }\r\n        \r\n    }\r\n    renderTitle = () => {\r\n        if(this.props.status){\r\n            return <h4>Thêm nội dung ghi chú</h4>\r\n        }\r\n        else return <h4>Sửa nội dung ghi chú</h4>\r\n    }\r\n    render() {\r\n        return (\r\n            <div  className=\"col-4\">\r\n                {this.renderTitle()}\r\n                <form className=\"form-group\">\r\n                    \r\n                    <label>Tiều đề ghi chú</label>\r\n                    <input type=\"text\" \r\n                    className=\"form-control\" \r\n                    name=\"title\" \r\n                    id=\"title\" \r\n                    onChange={(event) =>this.isChane(event)}\r\n                    aria-describedby=\"helpId\" \r\n                    defaultValue={this.props.item.title}\r\n                    placeholder=\"Nhập tiêu đề\"/>\r\n                    <small id=\"helpId\" \r\n                    className=\"form-text text-muted\">điền tiêu đề vào đây</small>\r\n                    <label htmlFor=\"content\">Nội dung</label>\r\n                    <textarea className=\"form-control\" \r\n                    name=\"content\" \r\n                    id=\"content\" \r\n                    onChange={(event) =>this.isChane(event)}\r\n                    rows={3} \r\n                    placeholder=\"Nhập nội dung vào đây\" \r\n                    defaultValue={this.props.item.content} />\r\n                <button type=\"reset\" \r\n                className=\"btn btn-primary btn-block mt-3\"\r\n                onClick={() =>this.addData(this.state.title,this.state.content)}\r\n                >Lưu thông tin</button>         \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        item: state.dataEditObject,\r\n        status: state.isAdd\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onClickMe: (item) => {\r\n            dispatch({type:\"ADD\",item})\r\n        },\r\n        getData: (item) => {\r\n            dispatch({type:\"EDIT\",item})\r\n        },\r\n        changeEditView: () => {\r\n            dispatch({ type: \"CHANGE_EDIT_STATUS\" })\r\n        },\r\n        alertOn: (alertContent) => {\r\n            dispatch({ type: \"ALERT_ON\",alertContent})\r\n        },\r\n        alertOff: () => {\r\n            dispatch({ type: \"ALERT_OFF\" })\r\n        }     \r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNoteForm);","import React, { Component } from 'react';\r\nimport { Alert, AlertContainer } from \"react-bs-notifier\";\r\nimport { connect } from 'react-redux';\r\n\r\nclass AlertInfo extends Component {\r\n    handleDismiss = () => {\r\n        this.props.alertOff();\r\n    }\r\n    render() {\r\n        if(!this.props.alertShow) return null;\r\n        return (\r\n            <AlertContainer>\r\n                <Alert type=\"success\" onDismiss={() => this.handleDismiss()} timeout={4000}>\r\n                    {this.props.alertContent}\r\n                </Alert>\r\n            </AlertContainer>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        alertShow: state.alertShow,\r\n        alertContent: state.alertContent\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        alertOff: () => {\r\n            dispatch({type:\"ALERT_OFF\"})\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AlertInfo)","import React, { Component } from 'react';\nimport Nav from './Nav';\nimport ListNote from './ListNote';\nimport AddNoteForm from './AddNoteForm';\nimport { connect } from 'react-redux';\nimport AlertInfo from './AlertInfo';\n\nclass App extends Component {\n  viewEditForm = () => {\n    if (this.props.isEdit) {\n      return <AddNoteForm />\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Nav />\n        <AlertInfo></AlertInfo>\n        <div className=\"container mt-3\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <ListNote/>\n            </div>\n            {this.viewEditForm()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isEdit: state.isEdit\n  }\n}\nexport default connect(mapStateToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {firebaseConnect} from '../firebase/Firebase';\r\n\r\nvar redux = require('redux');\r\nconst noteInitialState = {\r\n    isEdit: false,\r\n    dataEditObject:{},\r\n    isAdd: true,\r\n    alertShow: false,\r\n    alertContent:''\r\n}\r\nconst allReducer = (state = noteInitialState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            firebaseConnect.push(action.item);\r\n            return state\r\n\r\n        case \"CHANGE_EDIT_STATUS\":\r\n            return {...state,isEdit:!state.isEdit}\r\n\r\n        case \"GET_EDIT_DATA\":\r\n            return {...state,dataEditObject:action.editObject}\r\n\r\n        case \"EDIT\":\r\n            firebaseConnect.child(action.item.id).update({\r\n                title: action.item.title,\r\n                content: action.item.content\r\n            })\r\n            console.log('update ok');\r\n            return {...state,dataEditObject:{}}\r\n        case \"DELETE\":\r\n            firebaseConnect.child(action.deleteId).remove()\r\n            return state\r\n        case \"CHANGE_TITLE\":\r\n            return {...state,isAdd:action.status}\r\n        case \"ALERT_ON\":\r\n            return {...state,alertShow:true,alertContent:action.alertContent}\r\n        case \"ALERT_OFF\":\r\n            return {...state,alertShow:false}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nvar store = redux.createStore(allReducer);\r\nstore.subscribe(() => {\r\n    console.log(JSON.stringify(store.getState()))\r\n})\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './components/Store'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}